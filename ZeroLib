if not game:IsLoaded() then game.Loaded:Wait() end
local Library = {}
local uis,ts,rs = game:GetService("UserInputService"),game:GetService("TweenService"),game:GetService("RunService")
function Create(typestring,instance,props) local obj = typestring == "Instance.new" and Instance.new(instance) or typestring == "Drawing.new" and Drawing.new(instance) if not obj then return nil end for i,v in pairs(props or {}) do pcall(function() obj[i] = v end) end return obj end
function Library:CreateWindow(options)
    local sg = Create("Instance.new","ScreenGui",{Parent = ((syn and syn.protect_gui(sg) or gethui and gethui()) or game:GetService("CoreGui")),Name = "Zero Lib",IgnoreGuiInset = true,ZIndexBehavior = Enum.ZIndexBehavior.Sibling}) self.esg = sg
    Create("Instance.new","UIScale",{Parent = sg,Scale = math.clamp(math.min(workspace.CurrentCamera.ViewportSize.X/1920,workspace.CurrentCamera.ViewportSize.Y/1080),0.5,1)})
    local f = Create("Instance.new","Frame",{Parent = sg,Name = "Main",BackgroundColor3 = Color3.fromRGB(25,25,25),BorderSizePixel = 0,Position = UDim2.new(0.11680916,0,0.148900136,0),Size = UDim2.new(0.8,0,0.7,0)})
    Create("Instance.new","UIAspectRatioConstraint",{Parent = f,AspectRatio = 1.3})
    local f_ = Create("Instance.new","Frame",{Parent = f,Name = "Line",BackgroundColor3 = Color3.fromRGB(255,30,109),BorderSizePixel = 0,Size = UDim2.new(1,0,0.008,0)})
    local tl = Create("Instance.new","TextLabel",{Parent = f,Name = "Title",BackgroundTransparency = 1,Size = UDim2.new(0.4,0,0.1,0),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),Text = (options.Title and options.Title ~= "" and options.Title) or "Title",TextColor3 = Color3.fromRGB(200,200,200),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,RichText = true})
    Create("Instance.new","UIPadding",{Parent = tl,PaddingBottom = UDim.new(0.4,0),PaddingLeft = UDim.new(0.02,0)})
    Create("Instance.new","UITextSizeConstraint",{Parent = tl,MaxTextSize = 14,MinTextSize = 13})
    local f_0 = Create("Instance.new","Frame",{Parent = f,Name = "Tab Container",BackgroundColor3 = Color3.fromRGB(35,35,35),BorderSizePixel = 0,Position = UDim2.new(0.01,0,0.06,0),Size = UDim2.new(0.32,0,0.926,0)})
    local sf = Create("Instance.new","ScrollingFrame",{Parent = f_0,Name = "Main Container",BackgroundColor3 = Color3.fromRGB(50,50,50),BorderSizePixel = 0,Position = UDim2.new(0.015,0,0.008,0),Size = UDim2.new(0.965,0,0.985,0),AutomaticCanvasSize = Enum.AutomaticSize.Y,CanvasSize = UDim2.new(0,0,0,0),ScrollingDirection = Enum.ScrollingDirection.Y,ScrollBarThickness = 2})
    Create("Instance.new","UIListLayout",{Parent = sf,SortOrder = Enum.SortOrder.LayoutOrder})
    local f_1 = Create("Instance.new","Frame",{Parent = f,Name = "Context Contrainer",BackgroundColor3 = Color3.fromRGB(35,35,35),BorderSizePixel = 0,Position = UDim2.new(0.34,0,0.06,0),Size = UDim2.new(0.65,0,0.926,0)})
    local f_2 = Create("Instance.new","Frame",{Parent = f_1,Name = "Holder",BackgroundColor3 = Color3.fromRGB(50,50,50),BorderSizePixel = 0,Position = UDim2.new(0.01,0,0.008,0),Size = UDim2.new(0.977,0,0.985,0)})
    Create("Instance.new","UIListLayout",{Parent = f_2,SortOrder = Enum.SortOrder.LayoutOrder})
    local d = false
    local ds,fs
    f.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
            d = true
            ds = i.Position
            fs = f.Position
            i.Changed:Connect(function()
                if i.UserInputState == Enum.UserInputState.End then
                    d = false
                end
            end)
        end
    end)
    uis.InputChanged:Connect(function(i)
        if d and (i.UserInputType.Name == "MouseMovement" or i.UserInputType.Name == "Touch") then
            ts:Create(f,TweenInfo.new(.01,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{Position = UDim2.new(fs.X.Scale,fs.X.Offset+(i.Position-ds).X,fs.Y.Scale,fs.Y.Offset+(i.Position-ds).Y)}):Play()
        end
    end)
    local keys = {W = true,A = true,S = true,D = true}
    local bind = options.KeyBind and options.KeyBind:upper()
    local check = bind and Enum.KeyCode[bind] and not keys[bind]
    self._keybind = check and Enum.KeyCode[bind] or Enum.KeyCode.X
    if not check then
        warn("[ZeroLib] Invalid or blocked KeyBind: "..tostring(options.KeyBind).." â€” Defaulting to 'X'")
        game:GetService("StarterGui"):SetCore("SendNotification",{Title = "ZeroLib",Text = "Default KeyBind: X",Icon = "rbxassetid://7733658504",Duration = 8})
    end
    uis.InputBegan:Connect(function(i,gp)
        if not gp and i.KeyCode == self._keybind then
            f.Visible = not f.Visible
        end
    end)
    local Tabs = {Active = nil,Debounce = false}
    function Tabs:AddTab(options_)
        local tbtn = Create("Instance.new","TextButton",{Parent = sf,Name = "Tab",BackgroundTransparency = 1,Size = UDim2.new(1,0,0.06,0),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),Text = (options_.Title and options_.Title ~= "" and options_.Title) or "Tab",TextColor3 = Color3.fromRGB(160,160,160),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left})
        Create("Instance.new","UIPadding",{Parent = tbtn,PaddingLeft = UDim.new(0.03,0)})
        Create("Instance.new","UITextSizeConstraint",{Parent = tbtn,MaxTextSize = 14,MinTextSize = 13})
        local sf_ = Create("Instance.new","ScrollingFrame",{Parent = f_2,Name = "Tabs Context",BackgroundTransparency = 1,Size = UDim2.new(1,0,1,0),AutomaticCanvasSize = Enum.AutomaticSize.Y,CanvasSize = UDim2.new(0,0,0,0),ScrollingDirection = Enum.ScrollingDirection.Y,ScrollBarThickness = 2,Visible = false})
        Create("Instance.new","UIListLayout",{Parent = sf_,Padding = UDim.new(0.03,0),SortOrder = Enum.SortOrder.LayoutOrder})
        Create("Instance.new","UIPadding",{Parent = sf_,PaddingBottom = UDim.new(0.02,0),PaddingTop = UDim.new(0.02,0),PaddingLeft = UDim.new(0.02,0)})
        tbtn.Activated:Connect(function()
            if Tabs.Debounce or Tabs.Active == tbtn then return end
            Tabs.Debounce = true
            for _,v in ipairs(f_2:GetChildren()) do
                if v:IsA("ScrollingFrame") then
                    v.Visible = false
                end
            end
            sf_.Visible = true
            local prev = Tabs.Active
            Tabs.Active = tbtn
            ts:Create(tbtn,TweenInfo.new(.2,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(255,30,109)}):Play()
            if prev and prev ~= tbtn then
                ts:Create(prev,TweenInfo.new(.2,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(160,160,160)}):Play()
            end
            task.delay(0.25,function()
                Tabs.Debounce = false
            end)
        end)
        local Elements = {}
        function Elements:AddDropDown(options_0)
            
        end
        function Elements:AddButton(options_1)
            local f_3 = Create("Instance.new","Frame",{Parent = sf_,Name = "Button",BackgroundColor3 = Color3.fromRGB(25,25,25),BorderSizePixel = 0,Size = UDim2.new(0.98,0,0.1,0),ClipsDescendants = true})
            local tbtn_ = Create("Instance.new","TextButton",{Parent = f_3,BackgroundTransparency = 1,Size = UDim2.new(1,0,1,0),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),Text = (options_1.Title and options_1.Title ~= "" and options_1.Title) or "Button",TextColor3 = Color3.fromRGB(200,200,200),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left})
            Create("Instance.new","UIPadding",{Parent = tbtn_,PaddingLeft = UDim.new(0.02,0)})
            Create("Instance.new","UITextSizeConstraint",{Parent = tbtn_,MaxTextSize = 14,MinTextSize = 13})
            tbtn_.Activated:Connect(function() 
                if typeof(options_1.Callback) == "function" then
                    local ok,err = pcall(options_1.Callback)
                    if not ok then
                        warn(("[ZeroLib][%s] Error: %s"):format(options_1.Flag or "Flagged",err))
                    end
                end
            end)
            tbtn_.MouseEnter:Connect(function()
                ts:Create(tbtn_,TweenInfo.new(.3,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(255,30,109)}):Play()
            end)
            tbtn_.MouseLeave:Connect(function()
                ts:Create(tbtn_,TweenInfo.new(.3,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(200,200,200)}):Play()
            end)
        end
        function Elements:AddToggle(options_2)
            local f_4 = Create("Instance.new","Frame",{Parent = sf_,Name = "Toggle",BackgroundColor3 = Color3.fromRGB(25,25,25),BorderSizePixel = 0,Size = UDim2.new(0.98,0,0.1,0),ClipsDescendants = true})
            local f_5 = Create("Instance.new","Frame",{Parent = f_4,Name = "Status",BackgroundColor3 = Color3.fromRGB(35,35,35),BorderSizePixel = 0,Position = UDim2.new(0.91,0,0.213,0),Size = UDim2.new(0.069,0,0.6,0)})
            local tl_ = Create("Instance.new","TextLabel",{Parent = f_4,Name = "Title",BackgroundTransparency = 1,Size = (options_2.Description and UDim2.new(0.9,0,0.7,0) or UDim2.new(0.9,0,1,0)),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),Text = (options_2.Title and options_2.Title ~= "" and options_2.Title) or "Title",TextColor3 = Color3.fromRGB(200,200,200),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,RichText = true})
            Create("Instance.new","UIPadding",{Parent = tl_,PaddingLeft = UDim.new(0.02,0)})
            Create("Instance.new","UITextSizeConstraint",{Parent = tl_,MaxTextSize = 14,MinTextSize = 13})
            if options_2.Description then
                local tl_1 = Create("Instance.new","TextLabel",{Parent = f_4,Name = "Description",Position = UDim2.new(0,0,0.58,0),Size = UDim2.new(0.9,0,0.4,0),BackgroundTransparency = 1,Text = (options_2.Description and options_2.Description ~= "" and options_2.Description) or "Description",TextColor3 = Color3.fromRGB(160,160,160),TextSize = 10,FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),TextXAlignment = Enum.TextXAlignment.Left,TextWrapped = true,RichText = true})
                Create("Instance.new","UIPadding",{Parent = tl_1,PaddingLeft = UDim.new(0.02,0)})
                Create("Instance.new","UITextSizeConstraint",{Parent = tl_1,MaxTextSize = 11,MinTextSize = 10})
            end
            local tbtn_1 = Create("Instance.new","TextButton",{Parent = f_4,Name = "Tigger",Size = UDim2.new(1,0,1,0),BackgroundTransparency = 1,Text = "",})
            local toggled = false
            local debounce = false
            tbtn_1.Activated:Connect(function()
                if debounce then return end
                debounce = true
                toggled = not toggled
                if typeof(options_2.Callback) == "function" then
                    local ok,err = pcall(options_2.Callback,toggled)
                    if not ok then
                        warn(("[ZeroLib][%s] Error: %s"):format(options_2.Flag or "Flagged",err))
                    end
                end
                if toggled then 
                    ts:Create(f_5,TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundColor3 = Color3.fromRGB(0,255,0)}):Play()
                    ts:Create(tl_,TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(255,30,109)}):Play()
                else
                    ts:Create(f_5,TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{BackgroundColor3 = Color3.fromRGB(35,35,35)}):Play()
                    ts:Create(tl_,TweenInfo.new(0.3,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{TextColor3 = Color3.fromRGB(200,200,200)}):Play()
                end
                task.delay(0.3,function() debounce = false end)
            end)
        end
        function Elements:AddLabel(options_3)
            local f_6 = Create("Instance.new","Frame",{Parent = sf_,Name = "Label",BackgroundColor3 = Color3.fromRGB(25,25,25),BorderSizePixel = 0,Size = UDim2.new(0.98,0,0.1,0),ClipsDescendants = true,})
            local tl_2 = Create("Instance.new","TextLabel",{Parent = f_6,BackgroundTransparency = 1,Size = UDim2.new(1,0,1,0),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),TextColor3 = Color3.fromRGB(255,30,109),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,TextWrapped = true,RichText = true,Text = options_3.Text or "Label"})
            Create("Instance.new","UIPadding",{Parent = tl_2,PaddingLeft = UDim.new(0.02,0)})
            Create("Instance.new","UITextSizeConstraint",{Parent = tl_2,MaxTextSize = 14,MinTextSize = 13})
            local function resize()
                local size = 0.1
                tl_2.TextSize = 13
                for _ = 1,2 do
                    f_6.Size = UDim2.new(0.98,0,size,0)
                    task.wait()
                    if tl_2.TextFits then
                        return
                    end
                    size += 0.01
                end
                for i = 12,10,-1 do
                    tl_2.TextSize = i
                    task.wait()
                    if tl_2.TextFits then
                        return
                    end
                end
            end
            resize()
            local obj = {}
            function obj:Update(new)
                tl_2.Text = new
                resize()
            end
            function obj:Get()
                return tl_2.Text
            end
            return obj
        end
        function Elements:AddInput(options_4)
            local f_7 = Create("Instance.new","Frame",{Parent = sf_,Name = "Input Box",BackgroundColor3 = Color3.fromRGB(25,25,25),BorderSizePixel = 0,Size = UDim2.new(0.98,0,0.1,0),ClipsDescendants = true})
            local tb = Create("Instance.new","TextBox",{Parent = f_7,Name = "Input",BackgroundColor3 = Color3.fromRGB(35,35,35),BorderSizePixel = 0,Position = UDim2.new(0.81,0,0.213,0),Size = UDim2.new(0.169,0,0.6,0),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),TextColor3 = Color3.fromRGB(255,255,255),TextSize = 10,Text = "",TextWrapped = true,ClearTextOnFocus = true,PlaceholderText = "...",RichText = true,ClipsDescendants = true})
            Create("Instance.new","UITextSizeConstraint",{Parent = tb,MaxTextSize = 11,MinTextSize = 10})
            local tl_3 = Create("Instance.new","TextLabel",{Parent = f_7,Name = "Title",BackgroundTransparency = 1,Size = (options_4.Description and UDim2.new(0.9,0,0.7,0) or UDim2.new(0.9,0,1,0)),FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),Text = (options_4.Title and options_4.Title ~= "" and options_4.Title) or "Title",TextColor3 = Color3.fromRGB(200,200,200),TextSize = 13,TextXAlignment = Enum.TextXAlignment.Left,RichText = true})
            Create("Instance.new","UIPadding",{Parent = tl_3,PaddingLeft = UDim.new(0.02,0)})
            Create("Instance.new","UITextSizeConstraint",{Parent = tl,MaxTextSize = 14,MinTextSize = 13})
            if options_4.Description then
                local tl_4 = Create("Instance.new","TextLabel",{Parent = f_7,Name = "Description",Position = UDim2.new(0,0,0.58,0),Size = UDim2.new(0.9,0,0.4,0),BackgroundTransparency = 1,Text = (options_4.Description and options_4.Description ~= "" and options_4.Description) or "Description",TextColor3 = Color3.fromRGB(160,160,160),TextSize = 10,FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json",Enum.FontWeight.Bold,Enum.FontStyle.Normal),TextXAlignment = Enum.TextXAlignment.Left,TextWrapped = true,RichText = true})
                Create("Instance.new","UIPadding",{Parent = tl_4,PaddingLeft = UDim.new(0.02,0)})
                Create("Instance.new","UITextSizeConstraint",{Parent = tl,MaxTextSize = 11,MinTextSize = 10})
            end
            tb.FocusLost:Connect(function()
                if typeof(options_4.Callback) == "function" then
                    local ok,err = pcall(options_4.Callback,tb.Text)
                    if not ok then
                        warn(("[ZeroLib][%s] Error: %s"):format(options_4.Flag or "Flagged",err))
                    end
                end
            end)
            local obj_ = {}
            function obj_:GetText()
                return tb.Text
            end
            function obj_:SetText(new)
                tb.Text = new
            end
            return obj_
        end
        return Elements
    end
    return Tabs
end
function Library:Destroy()
    if self.esg then
        self.esg:Destroy()
        self.esg = nil
    end
end
function Library:SetKeyBind(new)
    local key = Enum.KeyCode[new:upper()]
    if key and not ({W=true,A=true,S=true,D=true})[new:upper()] then 
        self._keybind = key
        return true
    else
        warn("[ZeroLib] Invalid or blocked KeyBind: "..tostring(new))
        return false
    end
end
return Library
